(declare-fun papp7 () Int)
(declare-fun lq_tmp$36$x$35$$35$809 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun totalityError () Int)
(declare-fun fix$36$$36$dIP_a3uc () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Stable.StablePtr () Int)
(declare-fun Foreign.Storable.pokeByteOff () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Types.$36$tcAddr$35$ () Int)
(declare-fun lit$36$Data.ByteString.Builder.Prim.Internal.Base16 () Str)
(declare-fun GHC.Float.sinh () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun plen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807070$35$$35$d3vg () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun lq_tmp$36$x$35$$35$971 () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun GHC.Word.W32$35$ () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Data.Bits.And () Int)
(declare-fun tail () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun Foreign.Storable.peekByteOff () Int)
(declare-fun lq_tmp$36$x$35$$35$981 () Int)
(declare-fun fix$36$$36$krep_a3uk () Int)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807069$35$$35$d3vf () Int)
(declare-fun GHC.Word.W8$35$ () Int)
(declare-fun Data.Bits.Xor () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lit$36$$47$Users$47$pratyushsahu$47$Desktop$47$Research$47$bytestring_lh$45$llm$47$Data$47$ByteString$47$Builder$47$Prim$47$Internal$47$Base16.hs () Str)
(declare-fun ds_d3up () Int)
(declare-fun Data.ByteString.Builder.Prim.Internal.Base16.encode8_as_16h () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807063$35$$35$d3v9 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp5 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807034$35$$35$d3uG () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$994 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun Foreign.Storable.peek () Int)
(declare-fun pbase () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun deref () Int)
(declare-fun lq_tmp$36$x$35$$35$733 () Int)
(declare-fun lq_tmp$36$x$35$$35$734 () Int)
(declare-fun lit$36$undefined () Str)
(declare-fun lq_tmp$36$x$35$$35$770 () Int)
(declare-fun lq_tmp$36$x$35$$35$891 () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807065$35$$35$d3vb () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun GHC.Ptr.FunPtr () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_tmp$36$x$35$$35$469 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun p$35$$35$$35$a3tr () Str)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun Foreign.Marshal.Pool.Pool () Int)
(declare-fun GHC.Float.asin () Int)
(declare-fun lit$36$EncodingTable () Str)
(declare-fun lq_tmp$36$x$35$$35$545 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun Foreign.C.Types.CChar () Int)
(declare-fun GHC.Ptr.minusPtr () Int)
(declare-fun isNullPtr () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun GHC.Stack.Types.emptyCallStack () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Ptr.Ptr () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun lq_tmp$36$x$35$$35$559 () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun len () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807039$35$$35$d3uL () Int)
(declare-fun Data.Bits.Ior () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807045$35$$35$d3uR () Int)
(declare-fun GHC.Err.undefined () Int)
(declare-fun GHC.Ptr.castPtr () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun fldList () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Word.W16$35$ () Int)
(declare-fun Foreign.Storable.$36$fStorableWord16 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Foreign.Storable.peekElemOff () Int)
(declare-fun GHC.Word.W64$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$975 () Int)
(declare-fun Foreign.Ptr.IntPtr () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun fst () Int)
(declare-fun GHC.Word.$36$fIntegralWord8 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_tmp$36$x$35$$35$735 () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun lit$36$$39$EncodingTable () Str)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun Data.ByteString.Builder.Prim.Internal.Base16.lowerTable () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun Data.Bits.Iff () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Stack.Types.pushCallStack () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Stack.Types.SrcLoc () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lq_tmp$36$x$35$$35$483 () Int)
(declare-fun GHC.Ptr.plusPtr () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.ForeignPtr.ForeignPtr () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807032$35$$35$d3uE () Int)
(declare-fun head () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Foreign.Storable.poke () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun Foreign.Ptr.WordPtr () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun Data.ByteString.Builder.Prim.Internal.Base16.EncodingTable () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun table$35$$35$a3ts () Str)
(declare-fun lq_tmp$36$x$35$$35$776 () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun papp2 () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807068$35$$35$d3ve () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$24 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$23 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$22 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$20 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun coerce$35$$35$21 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$24 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$23 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$22 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$20 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)


(assert (distinct lit$36$$39$EncodingTable lit$36$EncodingTable lit$36$undefined lit$36$main lit$36$$47$Users$47$pratyushsahu$47$Desktop$47$Research$47$bytestring_lh$45$llm$47$Data$47$ByteString$47$Builder$47$Prim$47$Internal$47$Base16.hs lit$36$Data.ByteString.Builder.Prim.Internal.Base16))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$Data.ByteString.Builder.Prim.Internal.Base16) 44))
(assert (= (strLen lit$36$$47$Users$47$pratyushsahu$47$Desktop$47$Research$47$bytestring_lh$45$llm$47$Data$47$ByteString$47$Builder$47$Prim$47$Internal$47$Base16.hs) 102))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$undefined) 9))
(assert (= (strLen lit$36$EncodingTable) 13))
(assert (= (strLen lit$36$$39$EncodingTable) 14))
(push 1)
(push 1)
(pop 1)
(pop 1)
