(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun totalityError () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lit$36$Data.ByteString.Utils.ByteOrder () Str)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Float.sinh () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun lit$36$$39$BigEndian () Str)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_tmp$36$x$35$$35$327 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp5 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811895$35$$35$d4L5 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$411 () Int)
(declare-fun Data.ByteString.Utils.ByteOrder.LittleEndian () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun Data.ByteString.Utils.ByteOrder.BigEndian () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun lq_tmp$36$x$35$$35$301 () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811880$35$$35$d4KQ () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Float.asin () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811884$35$$35$d4KU () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun fun$35$$35$a4JH () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811878$35$$35$d4KO () Int)
(declare-fun len () Int)
(declare-fun lq_tmp$36$x$35$$35$326 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun val$35$$35$a4JI () Int)
(declare-fun lit$36$ByteOrder () Str)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_tmp$36$x$35$$35$425 () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun lq_tmp$36$x$35$$35$300 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811890$35$$35$d4L0 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun fst () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun Data.ByteString.Utils.ByteOrder.whenLittleEndian () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun Data.ByteString.Utils.ByteOrder.whenBigEndian () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun fun$35$$35$a4JF () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun Data.ByteString.Utils.ByteOrder.hostByteOrder () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun head () Int)
(declare-fun val$35$$35$a4JG () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun papp2 () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun lit$36$$39$LittleEndian () Str)
(declare-fun apply$35$$35$21 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$24 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$23 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$22 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$20 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun coerce$35$$35$21 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$24 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$23 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$22 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$20 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)


(assert (distinct lit$36$$39$LittleEndian lit$36$ByteOrder lit$36$main lit$36$$39$BigEndian lit$36$Data.ByteString.Utils.ByteOrder))
(assert (distinct Data.ByteString.Utils.ByteOrder.BigEndian Data.ByteString.Utils.ByteOrder.LittleEndian))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$Data.ByteString.Utils.ByteOrder) 31))
(assert (= (strLen lit$36$$39$BigEndian) 10))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$ByteOrder) 9))
(assert (= (strLen lit$36$$39$LittleEndian) 13))
(push 1)
(push 1)
(pop 1)
(pop 1)
