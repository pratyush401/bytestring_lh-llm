(declare-fun Foreign.C.Types.CSize () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Exception.Type.C$58$Exception () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun Control.DeepSeq.C$58$NFData () Int)
(declare-fun totalityError () Int)
(declare-fun Foreign.C.Types.CULLong () Int)
(declare-fun GHC.ForeignPtr.$36$WPlainForeignPtr () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Float.sinh () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun plen () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun Foreign.C.Types.CInt () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun isJust () Int)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lit$36$Data.ByteString.Internal () Str)
(declare-fun Data.LiquidPtr.snd3 () Int)
(declare-fun GHC.Base.C$58$Monoid () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun Data.LiquidPtr.fst3 () Int)
(declare-fun GHC.Word.W8$35$ () Int)
(declare-fun Language.Haskell.TH.Syntax.C$58$Lift () Int)
(declare-fun GHC.ForeignPtr.MallocPtr () Int)
(declare-fun Data.Data.DataType () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun Data.ByteString.Internal.Type.SizeOverflowException () Int)
(declare-fun papp5 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793021607$35$$35$dXjx () Int)
(declare-fun GHC.Exts.C$58$IsList () Int)
(declare-fun Foreign.C.Types.CPtrdiff () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun stringlen () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun Data.String.C$58$IsString () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Base.$58$$124$ () Int)
(declare-fun fromJust () Int)
(declare-fun Foreign.C.Types.CUInt () Int)
(declare-fun pbase () Int)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun GHC.Exception.Type.SomeException () Int)
(declare-fun deref () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun GHC.ForeignPtr.FinalPtr () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun Data.Data.C$58$Data () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lit$36$bytestring$45$lh$45$0.13.0.0$45$5odPtf5eoawLYRpIZ0llE6 () Str)
(declare-fun GHC.Ptr.FunPtr () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Float.asin () Int)
(declare-fun Data.Data.Constr () Int)
(declare-fun Data.Maybe.maybe () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun Foreign.C.Types.CChar () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun isNullPtr () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Ptr.Ptr () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.ForeignPtr.PlainPtr () Int)
(declare-fun ofForeignPtr () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun len () Int)
(declare-fun cStringLen () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.ForeignPtr.$36$WMallocPtr () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793021609$35$$35$dXjz () Int)
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun fplen () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun fst () Int)
(declare-fun Data.ByteString.Internal.Type.$36$WBS () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.Read.C$58$Read () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun GHC.Classes.C$58$Ord () Int)
(declare-fun Foreign.C.Types.CLLong () Int)
(declare-fun Data.LiquidPtr.plusForeignPtr () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.ForeignPtr.ForeignPtr () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun Data.ByteString.Internal.Type.pokeFpByteOff () Int)
(declare-fun head () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Data.ByteString.Internal.Type.BS () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun GHC.Base.C$58$Semigroup () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun Data.ByteString.Internal.Type.peekFpByteOff () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun Data.Typeable.Internal.C$58$Typeable () Int)
(declare-fun GHC.ForeignPtr.PlainForeignPtr () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$24 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$23 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$22 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$20 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun coerce$35$$35$21 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$24 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$23 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$22 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$20 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)


(assert (distinct lit$36$bytestring$45$lh$45$0.13.0.0$45$5odPtf5eoawLYRpIZ0llE6 lit$36$Data.ByteString.Internal))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))

(assert (= (strLen lit$36$Data.ByteString.Internal) 24))
(assert (= (strLen lit$36$bytestring$45$lh$45$0.13.0.0$45$5odPtf5eoawLYRpIZ0llE6) 45))
(push 1)
(push 1)
(pop 1)
(pop 1)
